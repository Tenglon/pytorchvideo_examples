{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "9cb3b268-ad06-4c73-b455-981956f0ab50",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import re\n",
    "from glob import glob\n",
    "from tqdm import tqdm\n",
    "import pandas as pd"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1035cf93-ac73-4639-a7e7-63063ce82352",
   "metadata": {},
   "source": [
    "### Get class2ind dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "b792d1ac-5fb3-44d2-87b1-031d825cf5f1",
   "metadata": {},
   "outputs": [],
   "source": [
    "anno_base = '/home/longteng/ssd/ucf_anno'\n",
    "class_ind_file = os.path.join(anno_base, 'classInd.txt')\n",
    "\n",
    "with open(class_ind_file, 'r') as fp:\n",
    "    lines = fp.readlines()\n",
    "    lines = [line.rstrip() for line in lines]\n",
    "\n",
    "    \n",
    "# a dictionary {'applyeyemakers' : 1, ...}\n",
    "class2ind = {line.split(' ')[1].lower() : line.split(' ')[0] for line in lines}"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6ac3ec88-1d73-4654-b64c-fde4049b2d6f",
   "metadata": {},
   "source": [
    "### Get path2clsind dictionary"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "8d5b2707-5e2a-49b7-916c-ceb486b6193e",
   "metadata": {},
   "outputs": [],
   "source": [
    "video_base = '/home/longteng/ssd/ucf101/'\n",
    "\n",
    "video_pattern = os.path.join(video_base, '*.avi')\n",
    "\n",
    "video_paths = glob(video_pattern)\n",
    "\n",
    "path2clsind = dict()\n",
    "\n",
    "for video_path in video_paths:\n",
    "    \n",
    "    clsname = os.path.split(video_path)[-1].split('_')[1]\n",
    "    clsind  = class2ind[clsname.lower()]\n",
    "    \n",
    "    path2clsind[video_path] = clsind"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e47d2960-1695-472f-bbdd-00263f3b9b4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>path</th>\n",
       "      <th>label</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>/home/longteng/ssd/ucf101/v_PlayingCello_g16_c...</td>\n",
       "      <td>59</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>/home/longteng/ssd/ucf101/v_Billiards_g19_c04.avi</td>\n",
       "      <td>12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>/home/longteng/ssd/ucf101/v_Biking_g18_c04.avi</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                path label\n",
       "0  /home/longteng/ssd/ucf101/v_PlayingCello_g16_c...    59\n",
       "1  /home/longteng/ssd/ucf101/v_Billiards_g19_c04.avi    12\n",
       "2     /home/longteng/ssd/ucf101/v_Biking_g18_c04.avi    11"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "path2clsind_df = pd.DataFrame.from_dict({'path':path2clsind.keys(), 'label':path2clsind.values()}, orient = 'columns')\n",
    "path2clsind_df.head(3)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1241f7f4-8a0b-475f-bef0-dbfce6ca6445",
   "metadata": {},
   "source": [
    "### Get csv for train_csv, each row is \"path, label\\n\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "7d76f25f-f3f8-4352-9fa7-1b7164421dd0",
   "metadata": {},
   "outputs": [],
   "source": [
    "train1_file = os.path.join(anno_base, 'trainlist01.txt')\n",
    "train2_file = os.path.join(anno_base, 'trainlist02.txt')\n",
    "train3_file = os.path.join(anno_base, 'trainlist03.txt')\n",
    "\n",
    "train_file = train1_file # Change this\n",
    "\n",
    "with open(train1_file, 'r') as fp:\n",
    "    lines = fp.readlines()\n",
    "    lines = [line.rstrip() for line in lines]\n",
    "    \n",
    "train_csv = train_file.replace('.txt', '.csv')\n",
    "\n",
    "with open(train_csv, 'w+') as fp:\n",
    "\n",
    "    new_lines = []\n",
    "    for line in lines:\n",
    "        new_line = re.sub('[a-zA-Z0-9]*/', video_base, line)\n",
    "        new_lines.append(new_line + '\\n')\n",
    "        \n",
    "    fp.writelines(new_lines)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4487c64b-b1b8-46d7-9f33-06bbf2925de1",
   "metadata": {},
   "source": [
    "### Get csv for test_csv, each row is \"path, label\\n\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "ae9b65da-d49f-4253-8245-2667861b1872",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 3783/3783 [00:14<00:00, 252.35it/s]\n"
     ]
    }
   ],
   "source": [
    "test1_file = os.path.join(anno_base, 'testlist01.txt')\n",
    "test2_file = os.path.join(anno_base, 'testlist01.txt')\n",
    "test3_file = os.path.join(anno_base, 'testlist01.txt')\n",
    "\n",
    "test_file = test3_file\n",
    "test_dict = dict()\n",
    "\n",
    "with open(test_file, 'r') as fp:\n",
    "    lines = fp.readlines()\n",
    "    lines = [line.rstrip() for line in lines]\n",
    "    \n",
    "for line in tqdm(lines):\n",
    "    v_fn = line.split('/')[1]\n",
    "    v_path = os.path.join(video_base, v_fn)\n",
    "    \n",
    "    row_pos = path2clsind_df.path.str.contains(v_fn)\n",
    "    label = path2clsind_df.loc[row_pos,'label']\n",
    "    label = label.values[0]\n",
    "\n",
    "    test_dict[v_path] = label"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b09cd69a-a1eb-431e-a9df-27a7b9635525",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>/home/longteng/ssd/ucf101/v_ApplyEyeMakeup_g01_c01.avi</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>/home/longteng/ssd/ucf101/v_ApplyEyeMakeup_g01_c02.avi</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>/home/longteng/ssd/ucf101/v_ApplyEyeMakeup_g01_c03.avi</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                    0\n",
       "/home/longteng/ssd/ucf101/v_ApplyEyeMakeup_g01_...  1\n",
       "/home/longteng/ssd/ucf101/v_ApplyEyeMakeup_g01_...  1\n",
       "/home/longteng/ssd/ucf101/v_ApplyEyeMakeup_g01_...  1"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_path2clsind_df = pd.DataFrame.from_dict(test_dict, orient='index')\n",
    "test_path2clsind_df.to_csv('test02.csv')\n",
    "test_path2clsind_df.head(3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "49f4d77d-96bc-4763-9873-81b3af798aa0",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
